// Generated by CoffeeScript 1.11.1
var FMLogger;

FMLogger = (function() {
  function FMLogger() {}

  FMLogger.prototype.levels = {
    log: 'log',
    info: 'info',
    warning: 'warning',
    error: 'error',
    debug: 'debug'
  };

  FMLogger.prototype.enabled = [];

  FMLogger.prototype.console = function() {
    if (typeof console !== "undefined" && console !== null) {
      return console.log.apply(console, arguments);
    }
  };

  FMLogger.prototype.log = function() {
    var i, len, level, ref;
    ref = this.enabled;
    for (i = 0, len = ref.length; i < len; i++) {
      level = ref[i];
      if (level === this.levels.log) {
        if ((typeof console !== "undefined" && console !== null) && (console.log != null)) {
          console.log.call(console, arguments);
          return;
        }
      }
    }
  };

  FMLogger.prototype.debug = function() {
    var i, len, level, ref;
    ref = this.enabled;
    for (i = 0, len = ref.length; i < len; i++) {
      level = ref[i];
      if (level === this.levels.debug) {
        if ((typeof console !== "undefined" && console !== null) && (console.log != null)) {
          console.log.call(console, arguments);
          return;
        }
      }
    }
  };

  FMLogger.prototype.info = function() {
    var i, len, level, ref;
    ref = this.enabled;
    for (i = 0, len = ref.length; i < len; i++) {
      level = ref[i];
      if (level === this.levels.log || level === this.levels.info) {
        if ((typeof console !== "undefined" && console !== null) && (console.info != null)) {
          console.info.call(console, arguments);
          return;
        }
      }
    }
  };

  FMLogger.prototype.warning = function() {
    var i, len, level, ref;
    ref = this.enabled;
    for (i = 0, len = ref.length; i < len; i++) {
      level = ref[i];
      if (level === this.levels.log || level === this.levels.warning) {
        if ((typeof console !== "undefined" && console !== null) && (console.warn != null)) {
          console.warn.call(console, arguments);
          return;
        }
      }
    }
  };

  FMLogger.prototype.error = function() {
    var argument, i, j, len, len1, level, ref;
    ref = this.enabled;
    for (i = 0, len = ref.length; i < len; i++) {
      level = ref[i];
      if (level === this.levels.log || level === this.levels.warning || level === this.levels.error) {
        if ((typeof console !== "undefined" && console !== null) && (console.error != null)) {
          for (j = 0, len1 = arguments.length; j < len1; j++) {
            argument = arguments[j];
            console.error(argument);
          }
          return;
        }
      }
    }
  };

  return FMLogger;

})();

Ext.define('FM.Application', {
  extend: 'Ext.app.Application',
  name: 'FM',
  requires: ['Ext.layout.container.Border', 'Ext.container.Viewport', 'Ext.form.Panel', 'Ext.Action', 'FM.model.File', 'Ext.util.Cookies', 'Ext.ux.Util', 'FM.overrides.Action', 'FM.view.windows.ErrorWindow', 'FM.view.windows.WarningWindow'],
  views: [],
  controllers: ['Index', 'MainHandler', 'FileHandler', 'ArchiveHandler', 'HomeHandler', 'SearchHandler'],
  actions: {},
  stores: [],
  init: function() {
    var debug;
    FM.backend = {};
    FM.backend.ajaxSend = this.ajaxSend;
    FM.backend.ajaxSubmit = this.ajaxSubmit;
    FM.Logger = new FMLogger;
    debug = parseInt($('body').attr('data-debug'));
    if (debug === 1) {
      FM.Logger.enabled = [FM.Logger.levels.debug, FM.Logger.levels.log, FM.Logger.levels.info, FM.Logger.levels.warning, FM.Logger.levels.error];
    } else {
      FM.Logger.enabled = [FM.Logger.levels.warning, FM.Logger.levels.error];
    }
    FM.Logger.log('Application Init');
    this.initHelpers();
    this.initConstants();
    return this.initEditor();
  },
  launch: function() {
    FM.viewport = this.createViewport();
    return FM.Logger.info('FM Application ready', this);
  },
  initEditor: function() {
    FM.Editor = {};
    FM.Editor.settings = {};
    FM.Viewer = {};
    FM.Viewer.settings = {};
    FM.Editor.getMode = this.GetEditorMode;
    FM.Editor.getEncodings = this.GetEditorEncodings;
    FM.Editor.getModes = this.GetEditorModes;
    FM.Viewer.getMode = this.GetEditorMode;
    FM.Viewer.getEncodings = this.GetEditorEncodings;
    return FM.Viewer.getModes = this.GetEditorModes;
  },
  initHelpers: function() {
    FM.helpers = {};
    FM.helpers.SetLoading = this.SetLoading;
    FM.helpers.UnsetLoading = this.UnsetLoading;
    FM.helpers.CopyToClipboard = this.CopyToClipboard;
    FM.helpers.ConvertToBinary = this.ConvertToBinary;
    FM.helpers.DateTimestamp = this.DateTimestamp;
    FM.helpers.EscapeUtf = this.EscapeUtf;
    FM.helpers.GetFileName = this.GetFileName;
    FM.helpers.GetFileExt = this.GetFileExt;
    FM.helpers.GetAbsName = this.GetAbsName;
    FM.helpers.GetAbsNames = this.GetAbsNames;
    FM.helpers.GetParentPath = this.GetParentPath;
    FM.helpers.GetRelativePath = this.GetRelativePath;
    FM.helpers.GetRootPath = this.GetRootPath;
    FM.helpers.GetSelected = this.GetSelected;
    FM.helpers.GetLastSelected = this.GetLastSelected;
    FM.helpers.SetActivePanel = this.SetActivePanel;
    FM.helpers.SelectDefault = this.SelectDefault;
    FM.helpers.NextPanel = this.NextPanel;
    FM.helpers.GetFilesNames = this.GetFilesNames;
    FM.helpers.GetFilesList = this.GetFilesList;
    FM.helpers.GetImageFiles = this.GetImageFiles;
    FM.helpers.CheckOverwrite = this.CheckOverwrite;
    FM.helpers.IsWindowsPath = this.IsWindowsPath;
    FM.helpers.IsSubpathOf = this.IsSubpathOf;
    FM.helpers.SizeFormat = this.SizeFormat;
    FM.helpers.SizeFormat = this.SizeFormat;
    FM.helpers.ShowError = this.ShowError;
    FM.helpers.ShowWarning = this.ShowWarning;
    FM.helpers.ApplyBoth = this.ApplyBoth;
    FM.helpers.ApplySession = this.ApplySession;
    FM.helpers.IsSameSession = this.IsSameSession;
    FM.helpers.ParseErrorMessage = this.ParseErrorMessage;
    FM.helpers.isAllowed = this.isAllowed;
    return FM.helpers.GetComponentByDomEl = this.GetComponentByDomEl;
  },
  GetFilesList: function(panel) {
    var records;
    records = _.filter(panel.filelist.store.getRange(), function(record) {
      if (record.get("name") !== "..") {
        if (record.get("is_link") !== true) {
          return true;
        }
      }
      return false;
    });
    return records;
  },
  GetImageFiles: function(panel) {
    var file, file_list, i, images, len;
    file_list = FM.helpers.GetFilesList(panel);
    images = [];
    for (i = 0, len = file_list.length; i < len; i++) {
      file = file_list[i];
      if (file.get('ext').match(FM.Regex.ImageFilesExt)) {
        images.push(file);
      }
    }
    return images;
  },
  GetComponentByDomEl: function(target) {
    var cmp, topmost;
    topmost = document.body;
    while ((target != null) && target.nodeType === 1 && target !== topmost) {
      cmp = Ext.getCmp(target.id);
      if (cmp) {
        return cmp;
      }
      target = target.parentNode;
    }
    return null;
  },
  isAllowed: function(action, panel, files) {
    var action_name, allowed_any, allowed_dir, allowed_multiple, allowed_no_files, panel_action, record_action, record_actions, ref, ref1;
    allowed_any = {};
    allowed_no_files = {};
    allowed_any[FM.Actions.HomeFtp.self.getName()] = true;
    allowed_any[FM.Actions.RemoteConnections.self.getName()] = true;
    allowed_any[FM.Actions.RemoteWebDav.self.getName()] = true;
    allowed_any[FM.Actions.Local.self.getName()] = true;
    allowed_any[FM.Actions.Refresh.self.getName()] = true;
    allowed_no_files[FM.Actions.Upload.self.getName()] = true;
    allowed_no_files[FM.Actions.SearchFiles.self.getName()] = true;
    allowed_no_files[FM.Actions.SearchText.self.getName()] = true;
    allowed_no_files[FM.Actions.NewFile.self.getName()] = true;
    allowed_no_files[FM.Actions.NewFolder.self.getName()] = true;
    allowed_no_files[FM.Actions.IPBlock.self.getName()] = true;
    action_name = action.self.getName();
    if (allowed_any[action_name] != null) {
      if (allowed_any[action_name]) {
        return true;
      } else {
        return false;
      }
    }
    if ((allowed_no_files[action_name] != null) && allowed_no_files[action_name]) {
      if ((panel.actions != null) && (panel.actions[action_name] != null)) {
        return panel.actions[action_name];
      }
    }
    if (files.length === 0) {
      return false;
    }
    allowed_multiple = {};
    allowed_dir = {};
    allowed_multiple[FM.Actions.DownloadArchive.self.getName()] = true;
    allowed_multiple[FM.Actions.DownloadZip.self.getName()] = true;
    allowed_multiple[FM.Actions.DownloadBZ2.self.getName()] = true;
    allowed_multiple[FM.Actions.DownloadGZip.self.getName()] = true;
    allowed_multiple[FM.Actions.DownloadTar.self.getName()] = true;
    allowed_multiple[FM.Actions.CreateArchive.self.getName()] = true;
    allowed_multiple[FM.Actions.CreateCopy.self.getName()] = true;
    allowed_multiple[FM.Actions.Copy.self.getName()] = true;
    allowed_multiple[FM.Actions.Move.self.getName()] = true;
    allowed_multiple[FM.Actions.Chmod.self.getName()] = true;
    allowed_multiple[FM.Actions.Remove.self.getName()] = true;
    allowed_dir[FM.Actions.Open.self.getName()] = true;
    allowed_dir[FM.Actions.AnalyzeSize.self.getName()] = true;
    allowed_dir[FM.Actions.DownloadArchive.self.getName()] = true;
    allowed_dir[FM.Actions.DownloadZip.self.getName()] = true;
    allowed_dir[FM.Actions.DownloadBZ2.self.getName()] = true;
    allowed_dir[FM.Actions.DownloadGZip.self.getName()] = true;
    allowed_dir[FM.Actions.DownloadTar.self.getName()] = true;
    allowed_dir[FM.Actions.CreateArchive.self.getName()] = true;
    allowed_dir[FM.Actions.CreateCopy.self.getName()] = true;
    allowed_dir[FM.Actions.Copy.self.getName()] = true;
    allowed_dir[FM.Actions.Move.self.getName()] = true;
    allowed_dir[FM.Actions.Chmod.self.getName()] = true;
    allowed_dir[FM.Actions.Remove.self.getName()] = true;
    allowed_dir[FM.Actions.Rename.self.getName()] = true;
    allowed_dir[FM.Actions.Refresh.self.getName()] = true;
    if (files.length === 1) {
      if ((panel.actions[action_name] != null) && panel.actions[action_name] === true) {
        if (FM.Actions.ExtractArchive.self.getName() === action_name) {
          return (ref = files[0].get("ext")) === 'zip' || ref === 'rar' || ref === '7z' || ref === 'gz' || ref === 'bz2' || ref === 'arch' || ref === 'tar' || ref === 'tgz';
        }
        if (((ref1 = files[0].get("ext")) === 'zip' || ref1 === 'rar' || ref1 === '7z' || ref1 === 'gz' || ref1 === 'bz2' || ref1 === 'arch' || ref1 === 'tar' || ref1 === 'tgz') && (FM.Actions.Edit.self.getName() === action_name || FM.Actions.View.self.getName() === action_name)) {
          return false;
        }
      }
      if (files[0].get('is_link')) {
        return false;
      }
      if (files[0].get('is_dir') && (allowed_dir[action_name] == null) && !allowed_dir[action_name]) {
        return false;
      }
      if (!files[0].get('is_dir') && !files[0].get('is_link') && FM.Actions.Open.self.getName() === action_name) {
        return false;
      }
      if (!files[0].get('is_dir') && !files[0].get('is_link') && FM.Actions.AnalyzeSize.self.getName() === action_name) {
        return false;
      }
    }
    if (files.length > 1) {
      if ((allowed_multiple[action_name] == null) || !allowed_multiple[action_name]) {
        return false;
      }
      if ((panel.actions != null) && (panel.actions[action_name] != null)) {
        if (panel.actions[action_name]) {
          return true;
        } else {
          return false;
        }
      }
    }
    if (files.length === 1) {
      if (panel.actions[action_name] != null) {
        panel_action = panel.actions[action_name];
        record_actions = files[0].actions;
        if ((record_actions != null) && (record_actions[action_name] != null)) {
          record_action = record_actions[action_name];
          if (record_action) {
            return true;
          } else {
            return false;
          }
        } else {
          if (panel_action) {
            return true;
          } else {
            return false;
          }
        }
      }
    }
    return false;
  },
  ParseErrorMessage: function(message, default_message) {
    var cant_create_dir_ftp, cant_create_file_ftp, file_binary, list_permission_denied, login_incorrect, login_incorrect2, no_such_file, operation_timeout_exceeded, rename_error_agent_no_file, rename_failed, upload_error;
    login_incorrect = /(.)*(530 login incorrect)(.)*/i;
    login_incorrect2 = /(.)*(Authorisation error)(.)*/i;
    cant_create_file_ftp = /(.)*(553 Could not create file)(.)*/;
    cant_create_dir_ftp = /(.)*(550 Create directory operation failed)(.)*/;
    no_such_file = /(.)*(No such file or directory)(.)*/;
    upload_error = /(.)*(Upload exception, filed to upload file)(.)*/;
    rename_error_agent_no_file = /(.)*(Unable to rename source element No such file or directory)(.)*/;
    rename_failed = /(.)*(Element with target name already exists)(.)*/i;
    list_permission_denied = /(.)*(List Folder Permission denied)(.)*/i;
    file_binary = /(.)*(File has binary content)(.)*/i;
    operation_timeout_exceeded = /(.)*(Operation timeout exceeded)(.)*/i;
    if (message.match(operation_timeout_exceeded)) {
      return t("Operation timeout exceeded.");
    }
    if (message.match(login_incorrect) || message.match(login_incorrect2)) {
      return t("Authorisation error. Try to log out and sign in again.");
    }
    if (message.match(rename_failed)) {
      return t("File with this name already exists in the current folder.");
    }
    if (message.match(rename_error_agent_no_file)) {
      return t("Unable to rename source element. No such file or directory");
    }
    if (message.match(list_permission_denied)) {
      return t("Unable to list folder. Permission Denied");
    }
    if (message.match(cant_create_file_ftp)) {
      return t("Could not create file - server error.<br/>Check your file or folder permissions");
    }
    if (message.match(cant_create_dir_ftp)) {
      return t("Could not create dir - server error.<br/>Check folder permissions or the dir already exists");
    }
    if (message.match(no_such_file)) {
      return t("No such file or directory.");
    }
    if (message.match(upload_error)) {
      return t("Error during file upload. Check rights and try again later.");
    }
    if (message.match(file_binary)) {
      return t("File has binary content and cannot be viewed");
    }
    if (default_message != null) {
      return t(default_message);
    } else {
      return t("FileManager Server Error");
    }
  },
  EscapeUtf: function(string) {
    var escapable, escaped, meta, result;
    escapable = /[\\"\x00-\x1f\x7f-\uffff]/g;
    meta = {
      '\b': '\\b',
      '\t': '\\t',
      '\n': '\\n',
      '\f': '\\f',
      '\r': '\\r',
      '"': '\\"',
      '\\': '\\\\'
    };
    escapable.lastIndex = 0;
    if (escapable.test(string)) {
      escaped = string.replace(escapable, function(a) {
        var c;
        c = meta[a];
        if (typeof c === 'string') {
          return c;
        } else {
          return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }
      });
      result = escaped;
    } else {
      result = string;
    }
    return result;
  },
  GetFilesNames: function(records) {
    return Ext.Array.map(records, function(record) {
      return record.get("name");
    });
  },
  CheckOverwrite: function(panel, records, callback) {
    var intersection, question;
    FM.Logger.debug("CheckOverwrite() called ", arguments);
    intersection = Ext.Array.intersect(FM.helpers.GetFilesNames(records), FM.helpers.GetFilesNames(panel.filelist.store.data.items));
    if (intersection.length === 0) {
      return callback(false);
    }
    question = Ext.create('FM.view.windows.WarningWindow', {
      title: t("Overwrite"),
      msg: Ext.util.Format.format(t("{0} items with matching names have been identified.<br/>Would you like to overwrite them?"), intersection.length),
      buttonsPreset: 'YES_NO_CANCEL',
      msgWidth: 350,
      yes: function() {
        FM.Logger.debug("CheckOverwrite yes() called");
        return callback(true);
      },
      no: function() {
        FM.Logger.debug("CheckOverwrite no() called");
        return callback(false);
      }
    });
    return question.show();
  },
  NextPanel: function(panel) {
    if (FM.Left === panel) {
      return FM.Right;
    } else {
      return FM.Left;
    }
  },
  GetEditorEncodings: function() {
    return ["ascii", "big5", "euc-jp", "euc-kr", "gb2312", "hz-gb-2312", "ibm855", "ibm866", "iso-2022-jp", "iso-2022-kr", "iso-8859-2", "iso-8859-5", "iso-8859-7", "iso-8859-8", "koi8-r", "maccyrillic", "shift_jis", "tis-620", "utf-8", "utf-16le", "utf-16be", "utf-32le", "utf-32be", "windows-1250", "windows-1251", "windows-1252", "windows-1253", "windows-1255"];
  },
  GetEditorModes: function() {
    return ["c_cpp", "clojure", "coffee", "coldfusion", "csharp", "css", "golang", "groovy", "haxe", "html", "java", "javascript", "json", "latex", "less", "liquid", "lua", "markdown", "ocaml", "perl", "pgsql", "php", "powershell", "python", "ruby", "scad", "scala", "scss", "sh:", "sql", "svg", "text", "textile", "xml", "xquery"];
  },
  GetEditorMode: function(record) {
    var editor_mode, ext, mode, types, values;
    FM.Logger.debug("GetEditorMode() called ", arguments);
    ext = record.get('ext');
    types = {
      c_cpp: "c,cc,cpp,cxx,h,hh,hpp,hxx",
      clojure: "clj",
      coffee: "coffee",
      coldfusion: "cfm",
      csharp: "cs,csx",
      css: "css",
      golang: "go",
      groovy: "groovy,gvy,gy,gsh",
      haxe: "hx,hxml",
      html: "html,htm,shtml,shtm,xhtml,hta,htx",
      java: "java",
      javascript: "js",
      json: "json",
      latex: "latex,tex,ltx,bib",
      less: "less",
      liquid: "liquid",
      lua: "lua",
      markdown: "markdown,mdown,mkdn,md,mkd,mdwn,mdtxt,mdtext",
      ocaml: "ocaml,ml,mli",
      perl: "pl,cgi,pm,plx",
      pgsql: "pgsql,psql",
      php: "php,php3,phtml",
      powershell: "ps1",
      python: "py,pyw",
      ruby: "rb,rbw,ru,gemspec,rake",
      scad: "scad",
      scala: "scala,kbm,scb,scl",
      scss: "scss,sass",
      sh: "sh,bsh,bash,bat",
      sql: "sql",
      svg: "svg",
      text: "txt",
      textile: "textile",
      xml: "xml,xsml,xsl,xslt,xsd,kml,wsdl,rdf,rss,atom,methml,mml,xul,xbl",
      xquery: "xquery,xq"
    };
    editor_mode = "text";
    for (mode in types) {
      values = types[mode];
      if (values.split(",").indexOf(ext) !== -1) {
        editor_mode = mode;
      }
    }
    FM.Logger.debug("GetEditorMode() returns ", editor_mode);
    return editor_mode;
  },
  DateTimestamp: function() {
    var dd, hh, mins, mm, today, yyyy;
    today = new Date();
    dd = today.getDate();
    mm = today.getMonth() + 1;
    hh = today.getHours();
    mins = today.getMinutes();
    yyyy = today.getFullYear();
    dd = dd < 10 ? '0' + dd : dd;
    mm = mm < 10 ? '0' + mm : mm;
    hh = hh < 10 ? '0' + hh : hh;
    mins = mins < 10 ? '0' + mins : mins;
    today = dd + mm + yyyy + '_' + hh + mins;
    return today;
  },
  ConvertToBinary: function(dec, leading_zero) {
    var bits, dividend, remainder, result;
    if (leading_zero == null) {
      leading_zero = true;
    }
    bits = [];
    dividend = parseInt(dec);
    remainder = 0;
    while (dividend >= 2) {
      remainder = dividend % 2;
      bits.push(remainder);
      dividend = (dividend - remainder) / 2;
    }
    bits.push(dividend);
    bits.reverse();
    result = bits.join("");
    if (leading_zero) {
      if (result.length === 0) {
        result = "000";
      }
      if (result.length === 1) {
        result = "00" + result;
      }
      if (result.length === 2) {
        result = "0" + result;
      }
    }
    return result;
  },
  CopyToClipboard: function(value, message) {
    var promt;
    if (message == null) {
      message = t("Copy to clipboard: press Ctrl+C then Enter");
    }
    FM.Logger.info("CopyToClipboard() called ", arguments);
    promt = Ext.create('FM.view.windows.PromtWindow', {
      title: t("Copy to clipboard"),
      msg: message,
      buttonsPreset: 'OK',
      fieldValue: value,
      ok: function(button, promt_window, field) {
        FM.Logger.info('OK handler()', arguments);
        return promt_window.close();
      }
    });
    return promt.show();
  },
  GetRelativePath: function(session, path) {
    var rel_path, win, windows;
    FM.Logger.info("GetRelativePath() called ", arguments);
    win = /^[A-Z][:][\\][.]*/i;
    if (win.test(session.path) === true) {
      FM.Logger.debug('This is windows!!!');
      windows = true;
    } else {
      FM.Logger.debug('This is not windows!!!');
      windows = false;
    }
    if (windows) {
      rel_path = path.substr(path.lastIndexOf("\\") + 1);
    } else {
      rel_path = path.substr(path.lastIndexOf("/") + 1);
    }
    return rel_path;
  },
  ApplySession: function(session, callback) {
    var fm_panel, i, len, panels, results, tmp_left_session, tmp_right_session, tmp_session;
    FM.Logger.info('ApplySession() called', session, FM.Left, FM.Right);
    tmp_session = Ext.ux.Util.clone(session);
    delete tmp_session.path;
    panels = [];
    tmp_left_session = Ext.ux.Util.clone(FM.Left.session);
    delete tmp_left_session.path;
    if (_.isEqual(tmp_session, tmp_left_session)) {
      panels.push(FM.Left);
    }
    tmp_right_session = Ext.ux.Util.clone(FM.Right.session);
    delete tmp_right_session.path;
    if (_.isEqual(tmp_session, tmp_right_session)) {
      panels.push(FM.Right);
    }
    results = [];
    for (i = 0, len = panels.length; i < len; i++) {
      fm_panel = panels[i];
      if (callback != null) {
        results.push(callback(fm_panel));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  IsSameSession: function(session, compare_session) {
    var tmp_compare_session, tmp_session;
    FM.Logger.info('IsSameSession() called', session, compare_session, FM.Left, FM.Right);
    tmp_session = Ext.ux.Util.clone(session);
    delete tmp_session.path;
    tmp_compare_session = Ext.ux.Util.clone(compare_session);
    delete tmp_compare_session.path;
    if (!_.isEqual(tmp_session, tmp_compare_session)) {
      return false;
    }
    return true;
  },
  ApplyBoth: function(panel, callback) {
    var fm_panel, i, len, panels, results;
    FM.Logger.info('ApplyBoth() called', panel, FM.Left, FM.Right);
    panels = [];
    if (_.isEqual(panel.session, FM.Left.session)) {
      panels.push(FM.Left);
    }
    if (_.isEqual(panel.session, FM.Right.session)) {
      panels.push(FM.Right);
    }
    results = [];
    for (i = 0, len = panels.length; i < len; i++) {
      fm_panel = panels[i];
      if (callback != null) {
        results.push(callback(fm_panel));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  ShowError: function(msg, callback) {
    var window;
    FM.Logger.error(msg);
    window = Ext.create('FM.view.windows.ErrorWindow', {
      msg: t(msg),
      ok: callback
    });
    return window.show();
  },
  ShowWarning: function(msg, callback) {
    var window;
    FM.Logger.error(msg);
    window = Ext.create('FM.view.windows.WarningWindow', {
      msg: t(msg),
      ok: callback
    });
    return window.show();
  },
  createViewport: function() {
    var viewport;
    viewport = Ext.create("Ext.container.Viewport", {
      layout: "border",
      minWidth: 800,
      minHeight: 600,
      defaults: {
        border: false,
        autoScroll: true
      },
      items: [
        {
          xtype: 'top-panel'
        }, {
          xtype: 'center-panel'
        }, {
          xtype: 'bottom-panel'
        }
      ]
    });
    return viewport;
  },
  ajaxSend: function(url, options) {
    var config;
    config = {
      method: 'POST',
      timeout: 300000,
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      }
    };
    options = Ext.apply({}, options, config);
    options.url = url;
    if (options.params != null) {
      options.params = Ext.JSON.encode(options.params);
    }
    return Ext.Ajax.request(options);
  },
  ajaxSubmit: function(url, options) {
    var config, form, submit_params;
    config = {
      method: 'POST',
      standardSubmit: true,
      hidden: true
    };
    options = Ext.apply({}, options, config);
    form = Ext.create('Ext.form.Panel', options);
    submit_params = {
      target: '_blank',
      url: url
    };
    if (options.params != null) {
      submit_params.params = options.params;
    }
    if (options.target != null) {
      submit_params.target = options.target;
    }
    form.submit(submit_params);
    Ext.defer(function() {
      form.close();
      if (options.success != null) {
        return options.success();
      }
    }, 100);
    return true;
  },
  SetLoading: function(component, msg) {
    return component.mask(msg);
  },
  UnsetLoading: function(component) {
    return component.unmask();
  },
  GetFileName: function(filename, is_dir) {
    if (is_dir == null) {
      is_dir = false;
    }
    if (is_dir) {
      return filename;
    }
    filename = filename.substring(0, Math.max(0, filename.lastIndexOf(".")) || filename.length);
    return filename;
  },
  GetFileExt: function(filename, is_dir) {
    var ext;
    if (is_dir == null) {
      is_dir = false;
    }
    if (is_dir) {
      return '';
    }
    ext = filename.substring((Math.max(0, filename.lastIndexOf(".")) || filename.length) + 1);
    return ext;
  },
  GetAbsName: function(session, record) {
    var abs_path, name, parent_path, path, windows;
    FM.Logger.debug('Helper GetAbsName() called', arguments);
    path = session.path;
    name = record.get('name');
    windows = this.IsWindowsPath(path);
    FM.Logger.debug("GetAbsName() called = ", path, name, session, windows);
    if (name === '..') {
      parent_path = this.GetParentPath(session, path);
      return parent_path;
    } else {
      if (path === '/' && windows) {
        abs_path = name;
      } else if (path === '/' && !windows) {
        abs_path = path + name;
      } else if (windows && path.match(/^[A-Z]:\\$/)) {
        abs_path = path + name;
      } else if (windows) {
        abs_path = path + '\\' + name;
      } else {
        abs_path = path + '/' + name;
      }
    }
    FM.Logger.debug("GetAbsName() abs_path = ", abs_path);
    return abs_path;
  },
  GetAbsNames: function(session, records) {
    var i, len, names, record;
    names = [];
    for (i = 0, len = records.length; i < len; i++) {
      record = records[i];
      names.push(this.GetAbsName(session, record));
    }
    return names;
  },
  IsWindowsPath: function(path) {
    var windows;
    if (path.indexOf("\\") !== -1) {
      windows = true;
    } else {
      windows = false;
    }
    return windows;
  },
  IsSubpathOf: function(session, path) {
    FM.Logger.debug('Called IsSubpathOf()', arguments);
    if (session.path != null) {
      if (session.path.substring(0, path.length) === path) {
        return true;
      }
    }
    return false;
  },
  GetParentPath: function(session, path) {
    var parent_path, separator, windows;
    FM.Logger.debug('Called GetParentPath()', arguments);
    windows = this.IsWindowsPath(path);
    if (windows) {
      separator = '\\';
    } else {
      separator = '/';
    }
    parent_path = path.substr(0, path.lastIndexOf(separator));
    FM.Logger.debug('parent_path =', parent_path, 'path = ', path);
    if (parent_path.length === 0 || (windows && path.match(/^[A-Z]:\\$/))) {
      parent_path = '/';
    }
    if (windows && parent_path.match(/^[A-Z]:$/)) {
      parent_path += '\\';
    }
    return parent_path;
  },
  GetRootPath: function(session) {
    return '/';
  },
  GetSelected: function(panel) {
    var records;
    records = _.filter(panel.filelist.getView().getSelectionModel().getSelection(), function(record) {
      if (record.get("name") !== "..") {
        if (record.get("is_link") !== true) {
          return true;
        }
      }
      return false;
    });
    return records;
  },
  GetLastSelected: function(panel) {
    var record;
    record = panel.filelist.getView().getSelectionModel().getLastSelected();
    return record;
  },
  SizeFormat: function(size) {
    if (size < 1024) {
      return size + " " + t("bytes");
    } else if (size < (1024 * 1024)) {
      return Math.round((size * 10) / 1024) / 10 + " " + "Kb";
    } else {
      return Math.round((size * 10) / (1024 * 1024)) / 10 + " " + "Mb";
    }
  },
  SetActivePanel: function(panel, restore_selection, select_default) {
    if (restore_selection == null) {
      restore_selection = true;
    }
    if (select_default == null) {
      select_default = true;
    }
    if (FM.Active === panel) {
      return;
    }
    FM.Logger.debug("SetActivePanel() called ", arguments, restore_selection);
    FM.Active.selection = FM.Active.filelist.getView().getSelectionModel().getSelection();
    FM.Inactive = FM.Active;
    FM.Active = panel;
    FM.Active.addCls('fm-panel-active');
    FM.Active.removeCls('fm-panel-inactive');
    FM.Inactive.addCls('fm-panel-inactive');
    FM.Inactive.removeCls('fm-panel-active');
    if (!restore_selection) {
      if (select_default) {
        FM.helpers.SelectDefault(FM.Active);
      }
      FM.getApplication().fireEvent(FM.Events.main.selectPanel, FM.Active, FM.helpers.GetSelected(FM.Active));
      return;
    }
    FM.Logger.debug("Restore selection ", FM.Active.selection);
    if ((FM.Active.selection != null) && FM.Active.selection.length > 0) {
      FM.Active.filelist.getView().getSelectionModel().select(FM.Active.selection);
    } else {
      FM.helpers.SelectDefault(FM.Active);
    }
    return FM.getApplication().fireEvent(FM.Events.main.selectPanel, FM.Active, FM.helpers.GetSelected(FM.Active));
  },
  SelectDefault: function(panel) {
    var selection;
    FM.Logger.debug("SelectDefault() ", arguments);
    if (panel.filelist.getStore() != null) {
      selection = panel.filelist.getStore().getAt(0);
      if (selection != null) {
        return panel.filelist.getView().getSelectionModel().select(selection);
      }
    }
  },
  initConstants: function() {
    FM.Session = {};
    FM.Session.HOME = 'home';
    FM.Session.FTP = 'ftp';
    FM.Session.SFTP = 'sftp';
    FM.Session.WEBDAV = 'webdav';
    FM.Status = {};
    FM.Status.STATUS_WAIT = 'wait';
    FM.Status.STATUS_RUNNING = 'running';
    FM.Status.STATUS_SUCCESS = 'success';
    FM.Status.STATUS_ERROR = 'error';
    FM.Status.STATUS_ABORT = 'abort';
    FM.Time = {};
    FM.Time.REQUEST_DELAY = 2000;
    FM.Quota = {};
    FM.Quota.WARNING_PERCENT = 0.95;
    FM.File = {};
    FM.File.MAX_SIZE = 5 * 1024 * 1024;
    FM.Regex = {};
    FM.Regex.TextFilesExt = /^(txt|js|php|cpp|c|py|css|rb|tpl|inc|sh|htaccess|htm|html|xhtml|json|sql|php4|php5|log(\.[0-9]+)?)$/i;
    FM.Regex.TextFilesConf = /^\.[a-z-_A-Z0-9]+$/i;
    return FM.Regex.ImageFilesExt = /^jpg|png|gif$/i;
  }
});
